Description: Documentation modification
 Now documentation correctly refers to mkchromecast instead of python
 mkchromecast.py
Author: Muammar El Khatib <muammar@debian.org>
Last-Update: 2017-12-23
Index: mkchromecast/mkchromecast/__init__.py
===================================================================
--- mkchromecast.orig/mkchromecast/__init__.py
+++ mkchromecast/mkchromecast/__init__.py
@@ -33,7 +33,7 @@ parser = argparse.ArgumentParser(
     whereas, installation from source needs users to go inside the cloned git
     repository and execute:

-        python mkchromecast.py
+        mkchromecast.py

     The two examples above will make Mkchromecast streams with node.js (or
     parec in Linux) together with mp3 audio coding format at a sample rate of
@@ -57,7 +57,7 @@ parser.add_argument(
     ALSA in your system.

     Example:
-        python mkchromecast.py --encoder-backend ffmpeg --alsa-device hw:2,1
+        mkchromecast.py --encoder-backend ffmpeg --alsa-device hw:2,1

     It only works for the ffmpeg and avconv backends, and it is not useful for
     pulseaudio users. For more information read the README.Debian file shipped
@@ -77,10 +77,10 @@ parser.add_argument(
     Example:

     ffmpeg:
-        python mkchromecast.py --encoder-backend ffmpeg -c ogg -b 128
+        mkchromecast.py --encoder-backend ffmpeg -c ogg -b 128

     node:
-        python mkchromecast.py  -b 128
+        mkchromecast.py  -b 128

     This option works with all backends. The example above sets the average
     bitrate to 128k.
@@ -101,10 +101,10 @@ parser.add_argument(
     Example:

     ffmpeg:
-        python mkchromecast.py --encoder-backend ffmpeg -c ogg -b 128 --chunk-size 2048
+        mkchromecast.py --encoder-backend ffmpeg -c ogg -b 128 --chunk-size 2048

     avconv:
-        python mkchromecast.py --encoder-backend avconv -c ogg -b 128 --chunk-size 64
+        mkchromecast.py --encoder-backend avconv -c ogg -b 128 --chunk-size 64

     '''
     )
@@ -118,7 +118,7 @@ parser.add_argument(
     Set the audio codec.

     Example:
-        python mkchromecast.py --encoder-backend ffmpeg -c ogg
+        mkchromecast.py --encoder-backend ffmpeg -c ogg

     Possible codecs:
         - mp3  [192k]   MPEG Audio Layer III (default)
@@ -139,7 +139,7 @@ parser.add_argument(
     Set a ffmpeg or avconv command for streaming video.

     Example:
-        python3 mkchromecast.py --video --command 'ffmpeg -re -i \
+        mkchromecast.py --video --command 'ffmpeg -re -i \
         /path/to/myvideo.mp4 -map_chapters -1 -vcodec libx264 -preset ultrafast \
         -tune zerolatency -maxrate 10000k -bufsize 20000k -pix_fmt yuv420p -g \
         60 -f mp4 -max_muxing_queue_size 9999 -movflags \
@@ -204,7 +204,7 @@ parser.add_argument(
         - gstreamer

     Example:
-        python mkchromecast.py --encoder-backend ffmpeg
+        mkchromecast.py --encoder-backend ffmpeg
     '''
     )

@@ -218,7 +218,7 @@ parser.add_argument(
     one network device available.

     Example:
-        python mkchromecast.py --encoder-backend ffmpeg --host 192.168.1.1
+        mkchromecast.py --encoder-backend ffmpeg --host 192.168.1.1

     You can pass it to all available backends.
     '''
@@ -233,7 +233,7 @@ parser.add_argument(
     Stream a file.

     Example:
-        python mkchromecast.py -i /path/to/file.mp4
+        mkchromecast.py -i /path/to/file.mp4
     '''
     )

@@ -247,7 +247,7 @@ parser.add_argument(
     connect.

     Example:
-        python mkchromecast.py -n mychromecast
+        mkchromecast.py -n mychromecast
     '''
     )

@@ -270,7 +270,7 @@ parser.add_argument(
     Example:

     ffmpeg:
-        python mkchromecast.py --encoder-backend ffmpeg -p 5100
+        mkchromecast.py --encoder-backend ffmpeg -p 5100

     '''
     )
@@ -343,10 +343,10 @@ parser.add_argument(
     Example:

     ffmpeg:
-        python mkchromecast.py --encoder-backend ffmpeg -c ogg -b 128 --sample-rate 32000
+        mkchromecast.py --encoder-backend ffmpeg -c ogg -b 128 --sample-rate 32000

     node:
-        python mkchromecast.py -b 128 --sample-rate 32000
+        mkchromecast.py -b 128 --sample-rate 32000

     This option works for both backends. The example above sets the sample rate
     to 32000Hz, and the bitrate to 128k.
@@ -380,7 +380,7 @@ parser.add_argument(

     Examples:

-        python mkchromecast.py --video --screencast
+        mkchromecast.py --video --screencast
     '''
     )

@@ -393,7 +393,7 @@ parser.add_argument(
     HH:MM:SS.

     Example:
-        python mkchromecast.py --video -i "/path/to/file.mp4" --seek 00:23:00
+        mkchromecast.py --video -i "/path/to/file.mp4" --seek 00:23:00

     '''
     )
@@ -406,7 +406,7 @@ parser.add_argument(
     Segmentate audio for improved live streaming when using ffmpeg.

     Example:
-        python mkchromecast.py --encoder-backend ffmpeg --segment-time 2
+        mkchromecast.py --encoder-backend ffmpeg --segment-time 2

     '''
     )
@@ -422,13 +422,13 @@ parser.add_argument(
     Example:

     Source URL, port and extension:
-        python mkchromecast.py --source-url http://192.99.131.205:8000/pvfm1.ogg -c ogg --control
+        mkchromecast.py --source-url http://192.99.131.205:8000/pvfm1.ogg -c ogg --control

     Source URL, no port, and extension:
-        python mkchromecast.py --source-url http://example.com/name.ogg -c ogg --control
+        mkchromecast.py --source-url http://example.com/name.ogg -c ogg --control

     Source URL without extension:
-        python mkchromecast.py --source-url http://example.com/name -c aac --control
+        mkchromecast.py --source-url http://example.com/name -c aac --control

     Supported source URLs are:

@@ -477,7 +477,7 @@ parser.add_argument(
     Update Mkchromecast git repository.

     Example:
-        python mkchromecast.py --update
+        mkchromecast.py --update

     This will execute for you:

@@ -505,13 +505,13 @@ parser.add_argument(
     Examples:

     Cast a file:
-        python mkchromecast.py --video -i "/path/to/file.mp4"
+        mkchromecast.py --video -i "/path/to/file.mp4"

     Cast from source-url:
-        python mkchromecast.py --source-url http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4 -c mp4 --control --video
+        mkchromecast.py --source-url http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4 -c mp4 --control --video

     Cast a youtube-url:
-        python mkchromecast.py -y https://www.youtube.com/watch\?v\=VuMBaAZn3II --video
+        mkchromecast.py -y https://www.youtube.com/watch\?v\=VuMBaAZn3II --video

     '''
     )
@@ -539,7 +539,7 @@ parser.add_argument(
         http://rg3.github.io/youtube-dl/supportedsites.html.

     Example:
-        python mkchromecast.py -y https://www.youtube.com/watch?v=NVvAJhZVBTc
+        mkchromecast.py -y https://www.youtube.com/watch?v=NVvAJhZVBTc

     Note that this is only working for websites running over https.
         '''
